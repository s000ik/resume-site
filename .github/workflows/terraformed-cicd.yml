name: Terraformed Resume CI/CD - Deploy Infrastructure via Terraform and Invalidate CloudFront Cache
on:
  push:
    branches:
      - main

jobs:
  terraform-backend:
    name: Deploy Infrastructure via Terraform
    runs-on: ubuntu-latest

    env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_aws_region: "ap-south-1"
        TF_VAR_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_DYNAMODB_TABLE: "cloud-resume-terraform-state-locks"
        AWS_BUCKET_NAME: ${{ secrets.AWS_TERRAFORM_STATE_BUCKET }}    
        TF_VAR_acm_certificate_arn: ${{ secrets.ACM_CERTIFICATE_ARN }}
        TF_VAR_cloudfront_distribution_id: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_TERRAFORM }} 

    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt
        continue-on-error: true

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve

  terraform-frontend:
    name: Terraformed Resume Frontend 
    needs: terraform-backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'ap-south-1'
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_TERRAFORM }}
  